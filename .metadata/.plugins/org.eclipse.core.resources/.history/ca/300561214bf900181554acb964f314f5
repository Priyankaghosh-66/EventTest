<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- <http auto-config="true">
		<intercept-url pattern="/adminlogin" access="ROLE_ADMIN" />
		<logout logout-success-url="/adminlogin" />
	</http>
	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="admin" password="admin@1234" authorities="ROLE_ADMIN" />
			</user-service>
		</authentication-provider>
	</authentication-manager> -->
	
	<!-- <http auto-config="true" use-expressions="true">
		<intercept-url pattern="/admin**" access="hasRole('ROLE_ADMIN')" />
		<intercept-url pattern="/j_spring_security_check" access="permitAll"/>
		
		<headers>
			<cache-control />
		</headers>
		
		<intercept-url pattern="/admin**" access="hasRole('ROLE_ADMIN')" />
		
		access denied page
		<access-denied-handler error-page="/403" />
		<form-login 
		    login-page="/login" 
		    default-target-url="/welcome" 
		    login-processing-url="/auth/login_check"
			authentication-failure-url="/login?error" 
			username-parameter="username"
			password-parameter="password" />
		<logout logout-success-url="/login?logout" delete-cookies="JSESSIONID"/>
		enable csrf protection
		<csrf/>
	</http>
	
	Select users and user_roles from database
	<authentication-manager>
		<authentication-provider>
		 <password-encoder ref="encoder" />
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query=
					"select user_name,user_password, enabled from user where user_name=?"
				authorities-by-username-query=
					"select username, role from user_role where username =?  " />
		</authentication-provider>
	</authentication-manager>
	added for generating encrypted password
	<beans:bean id="encoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<beans:constructor-arg name="strength" value="10" />
		
	</beans:bean> -->
	
	<!--  <beans:bean id="authProvider" 
	class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
	<property name="userDetailsService" ref="customUserService" />
	<property name="passwordEncoder" ref="encoder" />
  </beans:bean> -->
  
  
  
  
  
  
  <sec:http authentication-manager-ref="authenticationManager">
		<sec:intercept-url pattern="/secure/**" access="ROLE_USER" />
		<sec:anonymous/>

		<sec:csrf disabled="true"/>

        <!-- sec:form-login/-->
        
		<sec:form-login 
			login-page="/login/login.htm" 
			login-processing-url="/j_spring_security_check"
			authentication-failure-url="/login/login.htm?login_error=1" />

        
		<sec:custom-filter ref="oauth2ClientFilter" after="EXCEPTION_TRANSLATION_FILTER" />
	</sec:http>
	
	
	<sec:authentication-manager alias="authenticationManager">
		<sec:authentication-provider user-service-ref="userDetailsService"/>
	</sec:authentication-manager>
	
	<sec:user-service id="userDetailsService">
		<sec:user name="admin"  password="admin"  authorities="ROLE_USER,ROLE_ADMIN" />
	</sec:user-service>
	


    <!--apply the oauth client context-->
	<oauth:client id="oauth2ClientFilter" />
					

	<!--define an oauth 2 resource for sparklr (creates instance of AuthorizationCodeResourceDetails [extends ... OAuth2ProtectedResourceDetails]) -->
	<oauth:resource id="butkecResource"
                    type="authorization_code"
                    client-id="${oauth2.client.id}"
                    client-secret="${oauth2.client.secret}"
		            access-token-uri="${oauth2.client.accessTokenUri}"
                    user-authorization-uri="${oauth2.client.userAuthorizationUri}"
                    scope="read"/>
                    
	<!--define an oauth2 resource for facebook. according to the facebook docs, the 'client-id' is the App ID, and the 'client-secret' 
		is the App Secret -->
	<oauth:resource id="facebook" 
		type="authorization_code" 
		client-id="233668646673605" 
		client-secret="33b17e044ee6a4fa383f46ec6e28ea1d"
		authentication-scheme="query" 
		access-token-uri="https://graph.facebook.com/oauth/access_token" 
		user-authorization-uri="https://www.facebook.com/dialog/oauth"
		token-name="oauth_token" 
		client-authentication-scheme="form" />
		
		<bean id="butkeDemoService" class="com.token.spring.service.impl.DemoServiceImpl">
		<property name="demoUrl" value="${demoUrl}" />
	</bean>
	
	<oauth:rest-template id="oauthRestTemplate" resource="butkecResource" />
  
</beans:beans>